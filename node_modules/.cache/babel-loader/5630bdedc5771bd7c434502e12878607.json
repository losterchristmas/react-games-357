{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { message, Modal } from \"antd\";\nimport { useEffect, useState } from \"react\";\nimport { initGameDatas } from \"../../lib/initData\";\nexport const useGameHook = () => {\n  _s();\n\n  const [currentPlayer, setCurrentPlayer] = useState(\"Block\");\n  const [settingDatas, setSettingDatas] = useState([3, 5, 7]);\n  const [initGames, setInitGames] = useState(initGameDatas(settingDatas));\n  const [gamesDatas, setGamesDatas] = useState(initGames);\n  const [currentAllowSetPieceLine, setCurrentAllowSetPieceLine] = useState(-1);\n  const [gamesFinish, setGamesFinish] = useState(false);\n  const [currentChoosePiece, setCurrentChoosePiece] = useState([]);\n\n  const handleClickChangeCurrentPlayer = () => {\n    if (!currentChoosePiece.length) {\n      message.info(\"请走棋\");\n      return;\n    }\n\n    const player = currentPlayer === \"White\" ? \"Block\" : \"White\";\n    setCurrentPlayer(player);\n    setCurrentAllowSetPieceLine(-1);\n    setCurrentChoosePiece([]);\n  };\n\n  useEffect(() => {\n    let Datas = gamesDatas.flat(Infinity);\n    const gamesFinishFlag = Datas.reduce((arr, item) => {\n      return arr && item.disable;\n    }, true); // setGamesFinish(gamesFinishFlag);\n\n    if (gamesFinishFlag) {\n      const player = currentPlayer === \"White\" ? \"Block\" : \"White\";\n      Modal.success({\n        title: \"游戏结束\",\n        content: `${player}获胜`\n      });\n    }\n  }, [gamesDatas]);\n  useEffect(() => {\n    console.log(settingDatas);\n    initGameDatas(settingDatas);\n  }, [settingDatas]);\n  useEffect(() => {\n    console.log(initGames);\n    setGamesDatas(initGames);\n  }, [initGames]); // useEffect(() => {\n  //   console.log(settingDatas);\n  //   initGameDatas(settingDatas);\n  //   setTimeout(() => {\n  //     console.log(initGames);\n  //     setGamesDatas(initGames);\n  //     setTimeout(() => {\n  //       console.log(gamesDatas);\n  //     }, 1000);\n  //   }, 1000);\n  // }, [settingDatas]);\n\n  const handleClickBox = box => {\n    if (noAllowSetPiece(box)) {\n      return;\n    }\n\n    setPiece(box);\n  };\n\n  const noAllowSetPiece = box => {\n    if (currentAllowSetPieceLine > -1 && box.line !== currentAllowSetPieceLine || box.disable) {\n      return true;\n    }\n\n    setCurrentAllowSetPieceLine(box.line);\n    return false;\n  };\n\n  const setPiece = box => {\n    const {\n      line,\n      row\n    } = box;\n    setCurrentChoosePiece([...currentChoosePiece, box]);\n    setGamesDatas(item => {\n      const _item = JSON.parse(JSON.stringify(item));\n\n      _item[line][row].disable = true;\n      _item[line][row].currentPlayer = currentPlayer;\n      return _item;\n    });\n  };\n\n  const handleClickReset = () => {\n    Modal.confirm({\n      content: `确认重玩么？`,\n      okText: \"重玩\",\n      cancelText: \"取消\",\n      onOk: () => {\n        setGamesDatas(initGames);\n        setCurrentPlayer(\"Block\");\n        setCurrentAllowSetPieceLine(-1);\n      },\n      onCancel: () => {}\n    });\n  };\n\n  const handleClickSetting = () => {\n    setGamesDatas(initGames);\n    setCurrentPlayer(\"Block\");\n  };\n\n  return {\n    handleClickChangeCurrentPlayer,\n    currentPlayer,\n    setCurrentPlayer,\n    gamesDatas,\n    handleClickBox,\n    gamesFinish,\n    handleClickReset,\n    handleClickSetting,\n    settingDatas,\n    setSettingDatas\n  };\n};\n\n_s(useGameHook, \"x/iAN2U6TYolRJSxDhqHLwLqCTo=\");","map":{"version":3,"sources":["/Users/tangchenlong/Desktop/react-demo/react-admin-demos/src/components/games/hook.tsx"],"names":["message","Modal","useEffect","useState","initGameDatas","useGameHook","currentPlayer","setCurrentPlayer","settingDatas","setSettingDatas","initGames","setInitGames","gamesDatas","setGamesDatas","currentAllowSetPieceLine","setCurrentAllowSetPieceLine","gamesFinish","setGamesFinish","currentChoosePiece","setCurrentChoosePiece","handleClickChangeCurrentPlayer","length","info","player","Datas","flat","Infinity","gamesFinishFlag","reduce","arr","item","disable","success","title","content","console","log","handleClickBox","box","noAllowSetPiece","setPiece","line","row","_item","JSON","parse","stringify","handleClickReset","confirm","okText","cancelText","onOk","onCancel","handleClickSetting"],"mappings":"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","sourcesContent":["import { message, Modal } from \"antd\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { gameDatas, initGameDatas } from \"../../lib/initData\";\nimport { IBox, IPlayer } from \"../../type/types\";\n\nexport const useGameHook = () => {\n  const [currentPlayer, setCurrentPlayer] = useState(\"Block\");\n  const [settingDatas, setSettingDatas] = useState([3, 5, 7]);\n  const [initGames, setInitGames] = useState(initGameDatas(settingDatas));\n  const [gamesDatas, setGamesDatas] = useState(initGames);\n  const [currentAllowSetPieceLine, setCurrentAllowSetPieceLine] = useState(-1);\n  const [gamesFinish, setGamesFinish] = useState(false);\n  const [currentChoosePiece, setCurrentChoosePiece] = useState(\n    [] as Array<IBox>\n  );\n\n  const handleClickChangeCurrentPlayer = () => {\n    if (!currentChoosePiece.length) {\n      message.info(\"请走棋\");\n      return;\n    }\n    const player = currentPlayer === \"White\" ? \"Block\" : \"White\";\n    setCurrentPlayer(player);\n    setCurrentAllowSetPieceLine(-1);\n    setCurrentChoosePiece([]);\n  };\n\n  useEffect(() => {\n    let Datas: any = gamesDatas.flat(Infinity);\n    const gamesFinishFlag = Datas.reduce((arr: any, item: IBox) => {\n      return arr && item.disable;\n    }, true);\n    // setGamesFinish(gamesFinishFlag);\n    if (gamesFinishFlag) {\n      const player = currentPlayer === \"White\" ? \"Block\" : \"White\";\n      Modal.success({\n        title: \"游戏结束\",\n        content: `${player}获胜`,\n      });\n    }\n  }, [gamesDatas]);\n\n  useEffect(() => {\n    console.log(settingDatas);\n\n    initGameDatas(settingDatas);\n  }, [settingDatas]);\n\n  useEffect(() => {\n    console.log(initGames);\n\n    setGamesDatas(initGames);\n  }, [initGames]);\n\n  // useEffect(() => {\n  //   console.log(settingDatas);\n\n  //   initGameDatas(settingDatas);\n  //   setTimeout(() => {\n  //     console.log(initGames);\n\n  //     setGamesDatas(initGames);\n  //     setTimeout(() => {\n  //       console.log(gamesDatas);\n  //     }, 1000);\n  //   }, 1000);\n  // }, [settingDatas]);\n\n  const handleClickBox = (box: IBox) => {\n    if (noAllowSetPiece(box)) {\n      return;\n    }\n    setPiece(box);\n  };\n\n  const noAllowSetPiece = (box: IBox) => {\n    if (\n      (currentAllowSetPieceLine > -1 &&\n        box.line !== currentAllowSetPieceLine) ||\n      box.disable\n    ) {\n      return true;\n    }\n    setCurrentAllowSetPieceLine(box.line);\n    return false;\n  };\n\n  const setPiece = (box: IBox) => {\n    const { line, row } = box;\n    setCurrentChoosePiece([...currentChoosePiece, box]);\n    setGamesDatas((item) => {\n      const _item = JSON.parse(JSON.stringify(item));\n      _item[line][row].disable = true;\n      _item[line][row].currentPlayer = currentPlayer as IPlayer;\n      return _item;\n    });\n  };\n\n  const handleClickReset = () => {\n    Modal.confirm({\n      content: `确认重玩么？`,\n      okText: \"重玩\",\n      cancelText: \"取消\",\n      onOk: () => {\n        setGamesDatas(initGames);\n        setCurrentPlayer(\"Block\");\n        setCurrentAllowSetPieceLine(-1);\n      },\n      onCancel: () => {},\n    });\n  };\n\n  const handleClickSetting = () => {\n    setGamesDatas(initGames);\n    setCurrentPlayer(\"Block\");\n  };\n\n  return {\n    handleClickChangeCurrentPlayer,\n    currentPlayer,\n    setCurrentPlayer,\n    gamesDatas,\n    handleClickBox,\n    gamesFinish,\n    handleClickReset,\n    handleClickSetting,\n    settingDatas,\n    setSettingDatas,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}