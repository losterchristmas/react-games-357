{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { initGameDatas } from \"../../lib/initData\";\nexport const useGameHook = () => {\n  _s();\n\n  const [currentPlayer, setCurrentPlayer] = useState(\"Block\");\n  const [settingDatas, setSettingDatas] = useState([[1, 3], [2, 5], [3, 7]]);\n  const [initGames, setInitGames] = useState(initGameDatas(settingDatas));\n  const [gamesDatas, setGamesDatas] = useState(initGames);\n  const [currentAllowSetPieceLine, setCurrentAllowSetPieceLine] = useState(-1);\n  const [gamesFinish, setGamesFinish] = useState(false);\n  const [currentChoosePiece, setCurrentChoosePiece] = useState([]);\n\n  const handleClickChangeCurrentPlayer = () => {\n    if (!currentChoosePiece.length) {\n      Message({\n        message: \"请走棋\",\n        type: \"warning\"\n      });\n      return;\n    }\n\n    const player = currentPlayer === \"White\" ? \"Block\" : \"White\";\n    setCurrentPlayer(player);\n    setCurrentAllowSetPieceLine(-1);\n    setCurrentChoosePiece([]);\n  };\n\n  useEffect(() => {\n    let Datas = gamesDatas.flat(Infinity);\n    const gamesFinishFlag = Datas.reduce((arr, item) => {\n      return arr && item.disable;\n    }, true);\n    setGamesFinish(gamesFinishFlag);\n  }, [gamesDatas]);\n  useEffect(() => {\n    if (gamesFinish) {\n      const player = currentPlayer === \"White\" ? \"Block\" : \"White\";\n      MessageBox.alert(`${player}获胜`, \"游戏结束\");\n    }\n  }, [gamesFinish]);\n\n  const handleClickBox = box => {\n    if (noAllowSetPiece(box)) {\n      return;\n    }\n\n    setPiece(box);\n  };\n\n  const noAllowSetPiece = box => {\n    if (currentAllowSetPieceLine > -1 && box.line !== currentAllowSetPieceLine || box.disable) {\n      return true;\n    }\n\n    setCurrentAllowSetPieceLine(box.line);\n    return false;\n  };\n\n  const setPiece = box => {\n    const {\n      line,\n      row\n    } = box;\n    setCurrentChoosePiece([...currentChoosePiece, box]);\n    setGamesDatas(item => {\n      const _item = JSON.parse(JSON.stringify(item));\n\n      _item[line][row].disable = true;\n      _item[line][row].currentPlayer = currentPlayer;\n      return _item;\n    });\n  };\n\n  const handleClickReset = () => {\n    setGamesDatas(initGames);\n    setCurrentPlayer(\"Block\");\n  };\n\n  const handleClickSetting = () => {\n    setGamesDatas(initGames);\n    setCurrentPlayer(\"Block\");\n  };\n\n  return {\n    handleClickChangeCurrentPlayer,\n    currentPlayer,\n    setCurrentPlayer,\n    gamesDatas,\n    handleClickBox,\n    gamesFinish,\n    handleClickReset,\n    handleClickSetting,\n    settingDatas,\n    setSettingDatas\n  };\n};\n\n_s(useGameHook, \"PmZmVhLJ6fFcikVATYbYHNmEIfg=\");","map":{"version":3,"sources":["/Users/tangchenlong/Desktop/react-demo/react-admin-demos/src/components/games/hook.tsx"],"names":["useEffect","useState","initGameDatas","useGameHook","currentPlayer","setCurrentPlayer","settingDatas","setSettingDatas","initGames","setInitGames","gamesDatas","setGamesDatas","currentAllowSetPieceLine","setCurrentAllowSetPieceLine","gamesFinish","setGamesFinish","currentChoosePiece","setCurrentChoosePiece","handleClickChangeCurrentPlayer","length","Message","message","type","player","Datas","flat","Infinity","gamesFinishFlag","reduce","arr","item","disable","MessageBox","alert","handleClickBox","box","noAllowSetPiece","setPiece","line","row","_item","JSON","parse","stringify","handleClickReset","handleClickSetting"],"mappings":"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","sourcesContent":["import { useEffect, useMemo, useState } from \"react\";\nimport { gameDatas, initGameDatas } from \"../../lib/initData\";\nimport { IBox, IPlayer } from \"../../type/types\";\n\nexport const useGameHook = () => {\n  const [currentPlayer, setCurrentPlayer] = useState(\"Block\");\n  const [settingDatas, setSettingDatas] = useState([\n    [1, 3],\n    [2, 5],\n    [3, 7],\n  ]);\n  const [initGames, setInitGames] = useState(initGameDatas(settingDatas));\n  const [gamesDatas, setGamesDatas] = useState(initGames);\n  const [currentAllowSetPieceLine, setCurrentAllowSetPieceLine] = useState(-1);\n  const [gamesFinish, setGamesFinish] = useState(false);\n  const [currentChoosePiece, setCurrentChoosePiece] = useState(\n    [] as Array<IBox>\n  );\n\n  const handleClickChangeCurrentPlayer = () => {\n    if (!currentChoosePiece.length) {\n      Message({\n        message: \"请走棋\",\n        type: \"warning\",\n      });\n      return;\n    }\n    const player = currentPlayer === \"White\" ? \"Block\" : \"White\";\n    setCurrentPlayer(player);\n    setCurrentAllowSetPieceLine(-1);\n    setCurrentChoosePiece([]);\n  };\n\n  useEffect(() => {\n    let Datas: any = gamesDatas.flat(Infinity);\n    const gamesFinishFlag = Datas.reduce((arr: any, item: IBox) => {\n      return arr && item.disable;\n    }, true);\n    setGamesFinish(gamesFinishFlag);\n  }, [gamesDatas]);\n\n  useEffect(() => {\n    if (gamesFinish) {\n      const player = currentPlayer === \"White\" ? \"Block\" : \"White\";\n      MessageBox.alert(`${player}获胜`, \"游戏结束\");\n    }\n  }, [gamesFinish]);\n\n  const handleClickBox = (box: IBox) => {\n    if (noAllowSetPiece(box)) {\n      return;\n    }\n    setPiece(box);\n  };\n\n  const noAllowSetPiece = (box: IBox) => {\n    if (\n      (currentAllowSetPieceLine > -1 &&\n        box.line !== currentAllowSetPieceLine) ||\n      box.disable\n    ) {\n      return true;\n    }\n    setCurrentAllowSetPieceLine(box.line);\n    return false;\n  };\n\n  const setPiece = (box: IBox) => {\n    const { line, row } = box;\n    setCurrentChoosePiece([...currentChoosePiece, box]);\n    setGamesDatas((item) => {\n      const _item = JSON.parse(JSON.stringify(item));\n      _item[line][row].disable = true;\n      _item[line][row].currentPlayer = currentPlayer as IPlayer;\n      return _item;\n    });\n  };\n\n  const handleClickReset = () => {\n    setGamesDatas(initGames);\n    setCurrentPlayer(\"Block\");\n  };\n\n  const handleClickSetting = () => {\n    setGamesDatas(initGames);\n    setCurrentPlayer(\"Block\");\n  };\n\n  return {\n    handleClickChangeCurrentPlayer,\n    currentPlayer,\n    setCurrentPlayer,\n    gamesDatas,\n    handleClickBox,\n    gamesFinish,\n    handleClickReset,\n    handleClickSetting,\n    settingDatas,\n    setSettingDatas,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}